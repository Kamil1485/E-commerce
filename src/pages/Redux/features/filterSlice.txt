import { createSlice, createAsyncThunk } from "@reduxjs/toolkit"; //1
import axios from "axios";


export const fetchAsyncCategories = createAsyncThunk(
  "filter/fetchAsyncCategories",
  async (filterCategory) => {
    let response="";
    if(!filterCategory==""){
       response = await axios.get(`https://dummyjson.com/products${`/category/${filterCategory}`}?limit=70`) //eğer hiç bir değer girilmezse tüm ürünler gösterilecek
    }
    else{
      response = await axios.get("https://dummyjson.com/products?limit=70") //eğer hiç bir değer girilmezse tüm ürünler gösterilecek
    }
    return response.data.products;
    //eğer boş string gönderilirse tüm productsları görüntüle aksi halde categoriyi görüntüle
  }
); //2

const filterSlice = createSlice({
  name: "filter",
  initialState: {
    categories:["smartphones","laptops","fragrances","skincare","groceries","home-decoration",],
    filteredCategories: [],
    loading: false,
    
  },
  reducers: {
    filterByCategories: (state, action) => {
      if (action.payload === "all") {
        state.filteredCategories = "";
      } else {
        state.filteredCategories = "/category/" + action.payload;
      }
    },

    clearfilterByCategories: (state) => {
      state.filteredCategories = [];
    },
  },

  extraReducers: (builder) => {
    builder
      .addCase(fetchAsyncCategories.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchAsyncCategories.fulfilled, (state, action) => {
        state.loading = false;
        state.filteredCategories = action.payload;
      })
      .addCase(fetchAsyncCategories.rejected, (state) => {
        state.loading = false;
      });
  }
});

export const { filterByCategories, clearfilterByCategories, addCategories } =
  filterSlice.actions;
export default filterSlice.reducer;

/*
{type: 'filter/filterByCategories', payload: undefined}
payload
: 
undefined
type
: 
"filter/filterByCategories"
[[Prototype]]
: 
Object
*/
